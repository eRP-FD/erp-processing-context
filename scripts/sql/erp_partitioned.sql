/*
 * (C) Copyright IBM Deutschland GmbH 2021, 2024
 * (C) Copyright IBM Corp. 2021, 2024
 *
 * non-exclusively licensed to gematik GmbH
 */

-- You may call this SQL script from the command prompt by invoking:
--   psql -U <UserName> -h <HostName> -d <DBName> -f <PathToScript>
--   e.g.: psql -U erp_admin -h localhost -d erp -f scripts/sql/erp_partitioned.sql


SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

DROP FUNCTION IF EXISTS erp.insert_or_return_account_salt;
DROP INDEX IF EXISTS erp.task_last_modified_idx;
DROP INDEX IF EXISTS erp.task_kvnr_idx;
DROP INDEX IF EXISTS erp.task_169_last_modified_idx;
DROP INDEX IF EXISTS erp.task_169_kvnr_idx;
DROP INDEX IF EXISTS erp.communication_sender_idx;
DROP INDEX IF EXISTS erp.communication_recipient_not_received_idx;
DROP INDEX IF EXISTS erp.communication_recipient_idx;
DROP INDEX IF EXISTS erp.communication_prescription_id_idx;
DROP INDEX IF EXISTS erp.communication_prescription_type_idx;
DROP INDEX IF EXISTS erp.auditevent_prescription_id_idx;
DROP INDEX IF EXISTS erp.auditevent_prescription_type_idx;
DROP INDEX IF EXISTS erp.auditevent_kvnr_idx;
ALTER TABLE IF EXISTS ONLY erp.task DROP CONSTRAINT IF EXISTS task_pkey;
ALTER TABLE IF EXISTS ONLY erp.task_169 DROP CONSTRAINT IF EXISTS task_169_pkey;
ALTER TABLE IF EXISTS ONLY erp.communication DROP CONSTRAINT IF EXISTS communication_pkey;
ALTER TABLE IF EXISTS ONLY erp.auditevent DROP CONSTRAINT IF EXISTS auditevent_pkey;
ALTER TABLE IF EXISTS erp.task ALTER COLUMN prescription_id DROP DEFAULT;
ALTER TABLE IF EXISTS erp.task_169 ALTER COLUMN prescription_id DROP DEFAULT;
DROP TABLE IF EXISTS erp.account;
DROP SEQUENCE IF EXISTS erp.task_taskid_seq;
DROP TABLE IF EXISTS erp.task;
DROP SEQUENCE IF EXISTS erp.task_169_taskid_seq;
DROP TABLE IF EXISTS erp.task_169;
DROP TABLE IF EXISTS erp.communication;
DROP TABLE IF EXISTS erp.auditevent;
DROP TABLE IF EXISTS erp.vau_cmac;
DROP FUNCTION IF EXISTS erp.timestamp_from_suuid(uuid_in uuid);
DROP FUNCTION IF EXISTS erp.gen_suuid_low(ts_in timestamp with time zone);
DROP FUNCTION IF EXISTS erp.gen_suuid(ts_in timestamp with time zone);
DROP FUNCTION IF EXISTS erp.gen_suuid();
DROP FUNCTION IF EXISTS erp.epoch_from_suuid(uuid);
DROP TABLE IF EXISTS erp.blob;
DROP SEQUENCE IF EXISTS erp.blob_id_sequence;
DROP SCHEMA IF EXISTS erp;

\ir create_partitions_func.sql

--
-- Name: erp; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA erp AUTHORIZATION role_proc_admin;


--
-- Name: plpython3u; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS plpython3u WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpython3u; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON EXTENSION plpython3u IS 'PL/Python3U untrusted procedural language';


--
-- Name: gen_suuid(timestamp with time zone); Type: FUNCTION; Schema: public; Owner: -
-- Create a sortable UUID using the timestamp as input. The first 64 bit of the UUID
-- contain the timestamp, the next 64 bit contain 8 bytes of random data.
--
-- This duplicates functionality from BDR for generating sortable UUIDs and should
-- generate similar IDs to those generated by BDR while not requiring a BDR subscription.
--
CREATE OR REPLACE FUNCTION erp.gen_suuid(ts_in timestamp with time zone) RETURNS uuid
    LANGUAGE plpython3u
    PARALLEL safe
    AS $$

from dateutil.parser import parse
from math import floor
from secrets import token_bytes

ts = parse(ts_in)

# Magic value: Date of adoption of the Gregorian Calendar is nanoseconds
ts_int = floor(ts.timestamp() * 1000000) + 136702134000000000
ts_hex = hex(ts_int)[2:].zfill(16)
uuid_string = (ts_hex + token_bytes(8).hex()).ljust(32, '0')
return "{}-{}-{}-{}-{}".format(uuid_string[0:8], uuid_string[8:12], uuid_string[12:16], uuid_string[16:20], uuid_string[20:])
$$;


--
-- Name: gen_suuid(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION erp.gen_suuid() RETURNS uuid
    LANGUAGE plpgsql
    AS $$
    BEGIN
        RETURN (SELECT erp.gen_suuid('now'::timestamptz));
    END
$$;

--
-- Name: erp.gen_suuid_low(timestamp with time zone); Type: FUNCTION; Schema: public; Owner: -
-- Returns the lowest UUID value for a given timestamp, returning zero for MAC/Random value.
-- This is used to define a partition range that can use all the values between two given
--
--

CREATE FUNCTION erp.gen_suuid_low(ts_in timestamp with time zone, OUT _uuid uuid)
    LANGUAGE plpgsql
    AS $$
    BEGIN
    SELECT INTO _uuid (SUBSTRING(erp.gen_suuid(ts_in)::text FROM 0 FOR 19) || '0000-000000000000')::uuid;
    END
$$;


--
-- Name: timestamp_from_suuid(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION erp.timestamp_from_suuid(uuid_in uuid) RETURNS timestamp with time zone
    LANGUAGE plpython3u IMMUTABLE
    AS $$
from datetime import datetime, timezone

global uuid_in
uuid_in = uuid_in.replace("-", "")
ts = int(uuid_in[0:16], 16) - 136702134000000000
ts_float = float(ts) / 1000000
return datetime.fromtimestamp(ts_float, timezone.utc).strftime('%Y-%m-%d %H:%M:%S.%f%z')

$$;

--
-- Extract epoch from suuid
--
CREATE FUNCTION erp.epoch_from_suuid(uuid_in uuid) RETURNS numeric
    LANGUAGE plpgsql IMMUTABLE
    AS $$
    BEGIN
        RETURN (SELECT EXTRACT(EPOCH FROM erp.timestamp_from_suuid(uuid_in)));
    END
$$;
SET default_tablespace = '';

SET ROLE role_proc_admin;
--
-- Name: auditevent; Type: TABLE; Schema: erp; Owner: -
--

CREATE TABLE erp.auditevent (
    id uuid DEFAULT erp.gen_suuid(CURRENT_TIMESTAMP) NOT NULL,
    kvnr_hashed bytea NOT NULL,
    event_id smallint NOT NULL,
    action character(1) NOT NULL,
    agent_type smallint NOT NULL,
    observer smallint,
    prescription_id bigint,
    metadata bytea,
    blob_id integer
)
PARTITION BY RANGE (id);
ALTER TABLE erp.auditevent ALTER COLUMN kvnr_hashed SET STORAGE PLAIN;
ALTER TABLE erp.auditevent ALTER COLUMN action SET STORAGE PLAIN;

CREATE TABLE erp.auditevent202102 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2021-02-01 00:00:00+01')) TO (erp.gen_suuid_low('2021-03-01 00:00:00+01'));
CREATE TABLE erp.auditevent202103 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2021-03-01 00:00:00+01')) TO (erp.gen_suuid_low('2021-04-01 00:00:00+02'));
CREATE TABLE erp.auditevent202104 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2021-04-01 00:00:00+02')) TO (erp.gen_suuid_low('2021-05-01 00:00:00+02'));
CREATE TABLE erp.auditevent202105 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2021-05-01 00:00:00+02')) TO (erp.gen_suuid_low('2021-06-01 00:00:00+02'));
CREATE TABLE erp.auditevent202106 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2021-06-01 00:00:00+02')) TO (erp.gen_suuid_low('2021-07-01 00:00:00+02'));
CREATE TABLE erp.auditevent202107 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2021-07-01 00:00:00+02')) TO (erp.gen_suuid_low('2021-08-01 00:00:00+02'));
CREATE TABLE erp.auditevent202108 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2021-08-01 00:00:00+02')) TO (erp.gen_suuid_low('2021-09-01 00:00:00+02'));
CREATE TABLE erp.auditevent202109 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2021-09-01 00:00:00+02')) TO (erp.gen_suuid_low('2021-10-01 00:00:00+02'));
CREATE TABLE erp.auditevent202110 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2021-10-01 00:00:00+02')) TO (erp.gen_suuid_low('2021-11-01 00:00:00+01'));
CREATE TABLE erp.auditevent202111 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2021-11-01 00:00:00+01')) TO (erp.gen_suuid_low('2021-12-01 00:00:00+01'));
CREATE TABLE erp.auditevent202112 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2021-12-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-01-01 00:00:00+01'));
CREATE TABLE erp.auditevent202201 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2022-01-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-02-01 00:00:00+01'));
CREATE TABLE erp.auditevent202202 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2022-02-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-03-01 00:00:00+01'));
CREATE TABLE erp.auditevent202203 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2022-03-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-04-01 00:00:00+01'));
CREATE TABLE erp.auditevent202204 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2022-04-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-05-01 00:00:00+01'));
CREATE TABLE erp.auditevent202205 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2022-05-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-06-01 00:00:00+01'));
CREATE TABLE erp.auditevent202206 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2022-06-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-07-01 00:00:00+01'));
CREATE TABLE erp.auditevent202207 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2022-07-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-08-01 00:00:00+01'));
CREATE TABLE erp.auditevent202208 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2022-08-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-09-01 00:00:00+01'));
CREATE TABLE erp.auditevent202209 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2022-09-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-10-01 00:00:00+01'));
CREATE TABLE erp.auditevent202210 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2022-10-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-11-01 00:00:00+01'));
CREATE TABLE erp.auditevent202211 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2022-11-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-12-01 00:00:00+01'));
CREATE TABLE erp.auditevent202212 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2022-12-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-01-01 00:00:00+01'));
CREATE TABLE erp.auditevent202301 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2023-01-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-02-01 00:00:00+01'));
CREATE TABLE erp.auditevent202302 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2023-02-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-03-01 00:00:00+01'));
CREATE TABLE erp.auditevent202303 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2023-03-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-04-01 00:00:00+01'));
CREATE TABLE erp.auditevent202304 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2023-04-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-05-01 00:00:00+01'));
CREATE TABLE erp.auditevent202305 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2023-05-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-06-01 00:00:00+01'));
CREATE TABLE erp.auditevent202306 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2023-06-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-07-01 00:00:00+01'));
CREATE TABLE erp.auditevent202307 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2023-07-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-08-01 00:00:00+01'));
CREATE TABLE erp.auditevent202308 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2023-08-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-09-01 00:00:00+01'));
CREATE TABLE erp.auditevent202309 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2023-09-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-10-01 00:00:00+01'));
CREATE TABLE erp.auditevent202310 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2023-10-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-11-01 00:00:00+01'));
CREATE TABLE erp.auditevent202311 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2023-11-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-12-01 00:00:00+01'));
CREATE TABLE erp.auditevent202312 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2023-12-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-01-01 00:00:00+01'));

CREATE TABLE erp.auditevent202401 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2024-01-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-02-01 00:00:00+01'));
CREATE TABLE erp.auditevent202402 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2024-02-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-03-01 00:00:00+01'));
CREATE TABLE erp.auditevent202403 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2024-03-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-04-01 00:00:00+01'));
CREATE TABLE erp.auditevent202404 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2024-04-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-05-01 00:00:00+01'));
CREATE TABLE erp.auditevent202405 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2024-05-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-06-01 00:00:00+01'));
CREATE TABLE erp.auditevent202406 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2024-06-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-07-01 00:00:00+01'));
CREATE TABLE erp.auditevent202407 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2024-07-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-08-01 00:00:00+01'));
CREATE TABLE erp.auditevent202408 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2024-08-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-09-01 00:00:00+01'));
CREATE TABLE erp.auditevent202409 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2024-09-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-10-01 00:00:00+01'));
CREATE TABLE erp.auditevent202410 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2024-10-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-11-01 00:00:00+01'));
CREATE TABLE erp.auditevent202411 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2024-11-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-12-01 00:00:00+01'));
CREATE TABLE erp.auditevent202412 PARTITION OF erp.auditevent FOR VALUES FROM ( erp.gen_suuid_low('2024-12-01 00:00:00+01')) TO (erp.gen_suuid_low('2025-01-01 00:00:00+01'));



SET default_table_access_method = heap;

--
-- Name: communication; Type: TABLE; Schema: erp; Owner: -
--

CREATE TABLE erp.communication (
    id uuid DEFAULT erp.gen_suuid(CURRENT_TIMESTAMP) NOT NULL,
    sender bytea NOT NULL,
    recipient bytea NOT NULL,
    message_type smallint NOT NULL,
    received timestamp with time zone,
    prescription_id bigint NOT NULL,
    sender_blob_id integer NOT NULL,
    message_for_sender bytea NOT NULL,
    recipient_blob_id integer NOT NULL,
    message_for_recipient bytea NOT NULL,
-- A_20231 - E-Rezept-Fachdienst - Ausschluss Nachrichten an Empfaenger gleich Absender
    CONSTRAINT no_message_to_self CHECK (sender != recipient)
)

PARTITION BY RANGE (id);
ALTER TABLE erp.communication ALTER COLUMN sender SET STORAGE PLAIN;
ALTER TABLE erp.communication ALTER COLUMN recipient SET STORAGE PLAIN;

CREATE TABLE erp.communication202102 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2021-02-01 00:00:00+01')) TO (erp.gen_suuid_low('2021-03-01 00:00:00+01'));
CREATE TABLE erp.communication202103 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2021-03-01 00:00:00+01')) TO (erp.gen_suuid_low('2021-04-01 00:00:00+02'));
CREATE TABLE erp.communication202104 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2021-04-01 00:00:00+02')) TO (erp.gen_suuid_low('2021-05-01 00:00:00+02'));
CREATE TABLE erp.communication202105 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2021-05-01 00:00:00+02')) TO (erp.gen_suuid_low('2021-06-01 00:00:00+02'));
CREATE TABLE erp.communication202106 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2021-06-01 00:00:00+02')) TO (erp.gen_suuid_low('2021-07-01 00:00:00+02'));
CREATE TABLE erp.communication202107 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2021-07-01 00:00:00+02')) TO (erp.gen_suuid_low('2021-08-01 00:00:00+02'));
CREATE TABLE erp.communication202108 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2021-08-01 00:00:00+02')) TO (erp.gen_suuid_low('2021-09-01 00:00:00+02'));
CREATE TABLE erp.communication202109 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2021-09-01 00:00:00+02')) TO (erp.gen_suuid_low('2021-10-01 00:00:00+02'));
CREATE TABLE erp.communication202110 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2021-10-01 00:00:00+02')) TO (erp.gen_suuid_low('2021-11-01 00:00:00+01'));
CREATE TABLE erp.communication202111 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2021-11-01 00:00:00+01')) TO (erp.gen_suuid_low('2021-12-01 00:00:00+01'));
CREATE TABLE erp.communication202112 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2021-12-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-01-01 00:00:00+01'));
CREATE TABLE erp.communication202201 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2022-01-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-02-01 00:00:00+01'));
CREATE TABLE erp.communication202202 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2022-02-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-03-01 00:00:00+01'));
CREATE TABLE erp.communication202203 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2022-03-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-04-01 00:00:00+01'));
CREATE TABLE erp.communication202204 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2022-04-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-05-01 00:00:00+01'));
CREATE TABLE erp.communication202205 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2022-05-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-06-01 00:00:00+01'));
CREATE TABLE erp.communication202206 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2022-06-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-07-01 00:00:00+01'));
CREATE TABLE erp.communication202207 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2022-07-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-08-01 00:00:00+01'));
CREATE TABLE erp.communication202208 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2022-08-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-09-01 00:00:00+01'));
CREATE TABLE erp.communication202209 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2022-09-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-10-01 00:00:00+01'));
CREATE TABLE erp.communication202210 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2022-10-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-11-01 00:00:00+01'));
CREATE TABLE erp.communication202211 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2022-11-01 00:00:00+01')) TO (erp.gen_suuid_low('2022-12-01 00:00:00+01'));
CREATE TABLE erp.communication202212 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2022-12-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-01-01 00:00:00+01'));
CREATE TABLE erp.communication202301 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2023-01-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-02-01 00:00:00+01'));
CREATE TABLE erp.communication202302 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2023-02-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-03-01 00:00:00+01'));
CREATE TABLE erp.communication202303 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2023-03-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-04-01 00:00:00+01'));
CREATE TABLE erp.communication202304 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2023-04-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-05-01 00:00:00+01'));
CREATE TABLE erp.communication202305 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2023-05-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-06-01 00:00:00+01'));
CREATE TABLE erp.communication202306 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2023-06-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-07-01 00:00:00+01'));
CREATE TABLE erp.communication202307 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2023-07-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-08-01 00:00:00+01'));
CREATE TABLE erp.communication202308 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2023-08-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-09-01 00:00:00+01'));
CREATE TABLE erp.communication202309 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2023-09-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-10-01 00:00:00+01'));
CREATE TABLE erp.communication202310 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2023-10-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-11-01 00:00:00+01'));
CREATE TABLE erp.communication202311 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2023-11-01 00:00:00+01')) TO (erp.gen_suuid_low('2023-12-01 00:00:00+01'));
CREATE TABLE erp.communication202312 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2023-12-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-01-01 00:00:00+01'));

CREATE TABLE erp.communication202401 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2024-01-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-02-01 00:00:00+01'));
CREATE TABLE erp.communication202402 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2024-02-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-03-01 00:00:00+01'));
CREATE TABLE erp.communication202403 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2024-03-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-04-01 00:00:00+01'));
CREATE TABLE erp.communication202404 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2024-04-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-05-01 00:00:00+01'));
CREATE TABLE erp.communication202405 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2024-05-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-06-01 00:00:00+01'));
CREATE TABLE erp.communication202406 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2024-06-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-07-01 00:00:00+01'));
CREATE TABLE erp.communication202407 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2024-07-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-08-01 00:00:00+01'));
CREATE TABLE erp.communication202408 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2024-08-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-09-01 00:00:00+01'));
CREATE TABLE erp.communication202409 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2024-09-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-10-01 00:00:00+01'));
CREATE TABLE erp.communication202410 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2024-10-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-11-01 00:00:00+01'));
CREATE TABLE erp.communication202411 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2024-11-01 00:00:00+01')) TO (erp.gen_suuid_low('2024-12-01 00:00:00+01'));
CREATE TABLE erp.communication202412 PARTITION OF erp.communication FOR VALUES FROM ( erp.gen_suuid_low('2024-12-01 00:00:00+01')) TO (erp.gen_suuid_low('2025-01-01 00:00:00+01'));

--
-- Name: vau_cmac; Type: TABLE; Schema: erp; Owner: -
--

CREATE TABLE erp.vau_cmac (
    valid_date date NOT NULL,
    cmac bytea NOT NULL,
    CONSTRAINT erp_vau_cmac_pkey PRIMARY KEY (valid_date)
);
ALTER TABLE erp.vau_cmac ALTER COLUMN cmac SET STORAGE PLAIN;

--
-- Name: task; Type: TABLE; Schema: erp; Owner: -
--

CREATE TABLE erp.task (
    prescription_id bigint NOT NULL,
    kvnr bytea,
    kvnr_hashed bytea,
    last_modified timestamp with time zone DEFAULT CURRENT_TIMESTAMP::timestamp with time zone NOT NULL,
    authored_on timestamp with time zone DEFAULT CURRENT_TIMESTAMP::timestamp with time zone NOT NULL,
    expiry_date date,
    accept_date date,
    status smallint NOT NULL,
    task_key_blob_id integer,
    salt bytea,
    access_code bytea,
    secret bytea,
    healthcare_provider_prescription bytea,
    receipt bytea,
    when_handed_over timestamp with time zone,
    when_prepared timestamp with time zone,
    performer bytea,
    medication_dispense_blob_id integer,
    medication_dispense_bundle bytea
)
PARTITION BY RANGE (prescription_id);
ALTER TABLE erp.task ALTER COLUMN kvnr SET STORAGE PLAIN;
ALTER TABLE erp.task ALTER COLUMN kvnr_hashed SET STORAGE PLAIN;
ALTER TABLE erp.task ALTER COLUMN salt SET STORAGE PLAIN;
ALTER TABLE erp.task ALTER COLUMN access_code SET STORAGE PLAIN;
ALTER TABLE erp.task ALTER COLUMN secret SET STORAGE PLAIN;
ALTER TABLE erp.task ALTER COLUMN performer SET STORAGE PLAIN;

CALL pg_temp.create_task_partitions('erp.task');

--
-- Name: task_taskid_seq; Type: SEQUENCE; Schema: erp; Owner: -
--

CREATE SEQUENCE erp.task_taskid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: task_taskid_seq; Type: SEQUENCE OWNED BY; Schema: erp; Owner: -
--

ALTER SEQUENCE erp.task_taskid_seq OWNED BY erp.task.prescription_id;


--
-- Name: task prescription_id; Type: DEFAULT; Schema: erp; Owner: -
--

ALTER TABLE erp.task ALTER COLUMN prescription_id SET DEFAULT nextval('erp.task_taskid_seq'::regclass);


--
-- Name: account; Type: TABLE; Schema: erp; Owner: -
--

CREATE TABLE erp.account
(
    account_id bytea NOT NULL,
    master_key_type smallint NOT NULL, -- see: DatabaseModel.hxx -> enum MasterKeyType
    blob_id integer NOT NULL,
    salt bytea NOT NULL,
    CONSTRAINT erp_accounts_pkey PRIMARY KEY (account_id, master_key_type, blob_id),
    CONSTRAINT master_key_type_range CHECK (master_key_type > 0 AND master_key_type <= 3)
);

--
-- Name: blob; Type: TABLE; Schema: erp; Owner: -
--

CREATE TABLE erp.blob
(
    blob_id integer PRIMARY KEY NOT NULL, -- auto generated by blob_id_sequence
    type smallint NOT NULL,               -- see: BlobDatabase.hxx -> enum MasterKeyType
    host_ip varchar,                      -- for production server this should be an IP in the form ###.###.###.###
                                          -- but on DEV and BOX it can also by a symbolic name
    build varchar,                        -- build or release number/name, used to tie quotes to a specific build or release
    name bytea UNIQUE NOT NULL,           -- blobs names are unique
    data bytea NOT NULL,
    generation integer NOT NULL,
    meta varchar,                         -- json encoded meta information, like the ak name for attestation key pair

    -- *dateTime values are used for some blob types but not for others
    -- expiry is mutually exclusive with start/end
    -- start and end must both be set or both be null
    expiry_date_time timestamp with time zone,
    start_date_time timestamp with time zone,
    end_date_time timestamp with time zone,

    -- limit blob type to enum values in C++ BlobType
    CONSTRAINT blob_type_range CHECK (type > 0 AND type <= 11)
);

--
-- Name: blob_id_sequence; Type: SEQUENCE; Schema: erp; Owner: -
--

CREATE SEQUENCE erp.blob_id_sequence
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
    CYCLE
    OWNED BY erp.blob.blob_id;

--
-- Name: blob blob_id; Type: DEFAULT; Schema: erp; Owner: -
--

ALTER TABLE erp.blob ALTER COLUMN blob_id SET DEFAULT nextval('erp.blob_id_sequence'::regclass);


--
-- Name: auditevent auditevent_pkey; Type: CONSTRAINT; Schema: erp; Owner: -
--

ALTER TABLE erp.auditevent
    ADD CONSTRAINT auditevent_pkey PRIMARY KEY (id);


--
-- Name: communication communication_pkey; Type: CONSTRAINT; Schema: erp; Owner: -
--

ALTER TABLE erp.communication
    ADD CONSTRAINT communication_pkey PRIMARY KEY (id);


--
-- Name: task task_pkey; Type: CONSTRAINT; Schema: erp; Owner: -
--

ALTER TABLE erp.task
    ADD CONSTRAINT task_pkey PRIMARY KEY (prescription_id);


--
-- Name: auditevent_kvnr_idx; Type: INDEX; Schema: erp; Owner: -
--

CREATE INDEX auditevent_kvnr_idx ON erp.auditevent USING hash (kvnr_hashed);


--
-- Name: auditevent_prescription_id_idx; Type: INDEX; Schema: erp; Owner: -
--

CREATE INDEX auditevent_prescription_id_idx ON erp.auditevent USING btree (prescription_id);


--
-- Name: communication_prescription_id_idx; Type: INDEX; Schema: erp; Owner: -
--

CREATE INDEX communication_prescription_id_idx ON erp.communication USING btree (prescription_id);


--
-- Name: communication_recipient_idx; Type: INDEX; Schema: erp; Owner: -
--

CREATE INDEX communication_recipient_idx ON erp.communication USING hash (recipient);


--
-- Name: communication_recipient_not_received_idx; Type: INDEX; Schema: erp; Owner: -
--

CREATE INDEX communication_recipient_not_received_idx ON erp.communication USING hash (recipient) WHERE (received IS NULL);


--
-- Name: communication_sender_idx; Type: INDEX; Schema: erp; Owner: -
--

CREATE INDEX communication_sender_idx ON erp.communication USING hash (sender);


--
-- Name: task_kvnr_idx; Type: INDEX; Schema: erp; Owner: -
--

CREATE INDEX task_kvnr_idx ON erp.task USING hash (kvnr_hashed);


--
-- Name: task_last_modified_idx; Type: INDEX; Schema: erp; Owner: -
--

CREATE INDEX task_last_modified_idx ON erp.task USING btree (last_modified);


--
-- PostgreSQL database dump complete
--

-- This function tries to insert a salt into the accounts table
-- If it fails the current salt is returned, on success NULL is returned
CREATE FUNCTION
    erp.insert_or_return_account_salt(
        in_account_id bytea,
        in_master_key_type smallint,
        in_blob_id integer,
        in_salt bytea
    ) RETURNS bytea
    LANGUAGE plpgsql
    AS $$
    DECLARE out_salt bytea;
    DECLARE violated_constraint text;
    BEGIN
        INSERT INTO erp.account
                (account_id, master_key_type, blob_id, salt)
                VALUES (in_account_id, in_master_key_type, in_blob_id, in_salt);
        RETURN NULL;
    EXCEPTION
        WHEN integrity_constraint_violation THEN
            GET STACKED DIAGNOSTICS violated_constraint = CONSTRAINT_NAME;
            IF violated_constraint = 'erp_accounts_pkey'::text THEN
                SELECT salt INTO out_salt FROM erp.account
                    WHERE account_id = in_account_id
                    AND master_key_type = in_master_key_type
                    AND blob_id = in_blob_id;
                RETURN out_salt;
            END IF;
            RAISE;
    END
$$;
