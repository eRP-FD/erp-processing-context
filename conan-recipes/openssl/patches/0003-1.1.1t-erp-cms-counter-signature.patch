From 79d65c18809f0d3fee07f2cfb4df9631fa9ccf65 Mon Sep 17 00:00:00 2001
From: <redacted>
Date: Thu, 9 Feb 2023 10:09:07 +0100
Subject: [PATCH 3/3] 1.1.1t-erp-cms-counter-signature.patch

---
 crypto/cms/cms_att.c     |   3 +-
 crypto/cms/cms_err.c     |   5 +
 crypto/cms/cms_sd.c      | 242 +++++++++++++++++++++++++++++++++++----
 crypto/err/openssl.txt   |   4 +
 include/openssl/cms.h    |   5 +
 include/openssl/cmserr.h |   4 +
 6 files changed, 237 insertions(+), 26 deletions(-)

diff --git a/crypto/cms/cms_att.c b/crypto/cms/cms_att.c
index 4f71661919..1996c878ff 100644
--- a/crypto/cms/cms_att.c
+++ b/crypto/cms/cms_att.c
@@ -42,8 +42,7 @@ static const struct {
     /* See RFC Section 11 */
     { NID_pkcs9_contentType, CMS_ATTR_F_SIGNED
                              | CMS_ATTR_F_ONLY_ONE
-                             | CMS_ATTR_F_ONE_ATTR_VALUE
-                             | CMS_ATTR_F_REQUIRED_COND },
+                             | CMS_ATTR_F_ONE_ATTR_VALUE },
     { NID_pkcs9_messageDigest, CMS_ATTR_F_SIGNED
                                | CMS_ATTR_F_ONLY_ONE
                                | CMS_ATTR_F_ONE_ATTR_VALUE
diff --git a/crypto/cms/cms_err.c b/crypto/cms/cms_err.c
index 408fe13b87..a40ce3475b 100644
--- a/crypto/cms/cms_err.c
+++ b/crypto/cms/cms_err.c
@@ -20,6 +20,8 @@ static const ERR_STRING_DATA CMS_str_functs[] = {
      "CMS_add0_recipient_key"},
     {ERR_PACK(ERR_LIB_CMS, CMS_F_CMS_ADD0_RECIPIENT_PASSWORD, 0),
      "CMS_add0_recipient_password"},
+    {ERR_PACK(ERR_LIB_CMS, CMS_F_CMS_ADD1_COUNTER_SIGNATURE, 0),
+     "CMS_add1_counter_signature"},
     {ERR_PACK(ERR_LIB_CMS, CMS_F_CMS_ADD1_RECEIPTREQUEST, 0),
      "CMS_add1_ReceiptRequest"},
     {ERR_PACK(ERR_LIB_CMS, CMS_F_CMS_ADD1_RECIPIENT_CERT, 0),
@@ -35,6 +37,7 @@ static const ERR_STRING_DATA CMS_str_functs[] = {
     {ERR_PACK(ERR_LIB_CMS, CMS_F_CMS_COPY_CONTENT, 0), "cms_copy_content"},
     {ERR_PACK(ERR_LIB_CMS, CMS_F_CMS_COPY_MESSAGEDIGEST, 0),
      "cms_copy_messageDigest"},
+    {ERR_PACK(ERR_LIB_CMS, CMS_F_CMS_CREATE_DIGEST, 0), "cms_create_digest"},
     {ERR_PACK(ERR_LIB_CMS, CMS_F_CMS_DATA, 0), "CMS_data"},
     {ERR_PACK(ERR_LIB_CMS, CMS_F_CMS_DATAFINAL, 0), "CMS_dataFinal"},
     {ERR_PACK(ERR_LIB_CMS, CMS_F_CMS_DATAINIT, 0), "CMS_dataInit"},
@@ -135,8 +138,10 @@ static const ERR_STRING_DATA CMS_str_functs[] = {
     {ERR_PACK(ERR_LIB_CMS, CMS_F_CMS_SIGN, 0), "CMS_sign"},
     {ERR_PACK(ERR_LIB_CMS, CMS_F_CMS_SIGNED_DATA_INIT, 0),
      "cms_signed_data_init"},
+    {ERR_PACK(ERR_LIB_CMS, CMS_F_CMS_SIGNERINFO_ADD_COUNTER_SIGNATURE, 0), "cms_SignerInfo_add_counter_signature"},
     {ERR_PACK(ERR_LIB_CMS, CMS_F_CMS_SIGNERINFO_CONTENT_SIGN, 0),
      "cms_SignerInfo_content_sign"},
+    {ERR_PACK(ERR_LIB_CMS, CMS_F_CMS_SIGNERINFO_INIT, 0), "cms_SignerInfo_init"},
     {ERR_PACK(ERR_LIB_CMS, CMS_F_CMS_SIGNERINFO_SIGN, 0),
      "CMS_SignerInfo_sign"},
     {ERR_PACK(ERR_LIB_CMS, CMS_F_CMS_SIGNERINFO_VERIFY, 0),
diff --git a/crypto/cms/cms_sd.c b/crypto/cms/cms_sd.c
index b22299348b..e4083b81e3 100644
--- a/crypto/cms/cms_sd.c
+++ b/crypto/cms/cms_sd.c
@@ -290,22 +290,15 @@ static int ossl_cms_add1_signing_cert_v2(CMS_SignerInfo *si,
     return ret;
 }
 
-CMS_SignerInfo *CMS_add1_signer(CMS_ContentInfo *cms,
-                                X509 *signer, EVP_PKEY *pk, const EVP_MD *md,
-                                unsigned int flags)
+/* Creates and partially initializes a new signer info and adjusts signed data in CMS,
+ * but still do not add it to CMS directly */
+CMS_SignerInfo *cms_SignerInfo_init(CMS_SignedData *sd,
+                                     X509 *signer, EVP_PKEY *pk, const EVP_MD **md,
+                                     unsigned int flags)
 {
-    CMS_SignedData *sd;
     CMS_SignerInfo *si = NULL;
-    X509_ALGOR *alg;
-    int i, type;
-    if (!X509_check_private_key(signer, pk)) {
-        CMSerr(CMS_F_CMS_ADD1_SIGNER,
-               CMS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
-        return NULL;
-    }
-    sd = cms_signed_data_init(cms);
-    if (!sd)
-        goto err;
+    int type = 0;
+
     si = M_ASN1_new_of(CMS_SignerInfo);
     if (!si)
         goto merr;
@@ -321,7 +314,7 @@ CMS_SignerInfo *CMS_add1_signer(CMS_ContentInfo *cms,
     si->pctx = NULL;
 
     if (si->mctx == NULL) {
-        CMSerr(CMS_F_CMS_ADD1_SIGNER, ERR_R_MALLOC_FAILURE);
+        CMSerr(CMS_F_CMS_SIGNERINFO_INIT, ERR_R_MALLOC_FAILURE);
         goto err;
     }
 
@@ -338,23 +331,48 @@ CMS_SignerInfo *CMS_add1_signer(CMS_ContentInfo *cms,
     if (!cms_set1_SignerIdentifier(si->sid, signer, type))
         goto err;
 
-    if (md == NULL) {
+    if (*md == NULL) {
         int def_nid;
         if (EVP_PKEY_get_default_digest_nid(pk, &def_nid) <= 0)
             goto err;
-        md = EVP_get_digestbynid(def_nid);
-        if (md == NULL) {
-            CMSerr(CMS_F_CMS_ADD1_SIGNER, CMS_R_NO_DEFAULT_DIGEST);
+        *md = EVP_get_digestbynid(def_nid);
+        if (*md == NULL) {
+            CMSerr(CMS_F_CMS_SIGNERINFO_INIT, CMS_R_NO_DEFAULT_DIGEST);
             goto err;
         }
     }
 
-    if (!md) {
-        CMSerr(CMS_F_CMS_ADD1_SIGNER, CMS_R_NO_DIGEST_SET);
-        goto err;
-    }
+    X509_ALGOR_set_md(si->digestAlgorithm, *md);
+
+    return si;
 
-    X509_ALGOR_set_md(si->digestAlgorithm, md);
+ merr:
+    CMSerr(CMS_F_CMS_SIGNERINFO_INIT, ERR_R_MALLOC_FAILURE);
+ err:
+    M_ASN1_free_of(si, CMS_SignerInfo);
+    return NULL;
+
+}
+
+CMS_SignerInfo *CMS_add1_signer(CMS_ContentInfo *cms,
+                                X509 *signer, EVP_PKEY *pk, const EVP_MD *md,
+                                unsigned int flags)
+{
+    CMS_SignedData *sd = NULL;
+    X509_ALGOR *alg = NULL;
+    CMS_SignerInfo *si = NULL;
+    int i = 0;
+    if (!X509_check_private_key(signer, pk)) {
+        CMSerr(CMS_F_CMS_ADD1_SIGNER,
+               CMS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
+        return NULL;
+    }
+    sd = cms_signed_data_init(cms);
+    if (!sd)
+        goto err;
+    si = cms_SignerInfo_init(sd, signer, pk, &md, flags);
+    if (!si)
+        goto err;
 
     /* See if digest is present in digestAlgorithms */
     for (i = 0; i < sk_X509_ALGOR_num(sd->digestAlgorithms); i++) {
@@ -1025,3 +1043,179 @@ int CMS_add_standard_smimecap(STACK_OF(X509_ALGOR) **smcap)
         return 0;
     return 1;
 }
+
+int cms_create_digest(const EVP_MD *md,
+                      const unsigned char *message, size_t message_len,
+                      unsigned char **digest, unsigned int *digest_len)
+{
+    EVP_MD_CTX *mdctx;
+    mdctx = EVP_MD_CTX_new();
+    if(!mdctx)
+        goto merr;
+
+    if(EVP_DigestInit_ex(mdctx, md, NULL) != 1)
+        goto err;
+
+    if(EVP_DigestUpdate(mdctx, message, message_len) != 1)
+        goto err;
+
+    *digest = (unsigned char *)OPENSSL_malloc(EVP_MD_size(md));
+    if(!*digest)
+        goto merr;
+
+    if(EVP_DigestFinal_ex(mdctx, *digest, digest_len) != 1)
+        goto err;
+
+    EVP_MD_CTX_free(mdctx);
+    return 1;
+
+ merr:
+    CMSerr(CMS_F_CMS_CREATE_DIGEST, ERR_R_MALLOC_FAILURE);
+ err:
+    EVP_MD_CTX_free(mdctx);
+    return 0;
+
+}
+
+int cms_SignerInfo_add_counter_signature(CMS_SignerInfo *si, CMS_SignerInfo *counterSignature)
+{
+    unsigned char *csder = NULL;
+    int len = 0;
+
+    len = ASN1_item_i2d((ASN1_VALUE*)counterSignature, &csder, ASN1_ITEM_rptr(CMS_SignerInfo));
+    if (len < 0)
+        goto merr;
+
+    if (!CMS_unsigned_add1_attr_by_NID(si, NID_pkcs9_countersignature,
+                                       V_ASN1_SEQUENCE, csder, len))
+        goto err;
+
+    OPENSSL_free(csder);
+    return 1;
+
+ merr:
+    CMSerr(CMS_F_CMS_SIGNERINFO_ADD_COUNTER_SIGNATURE, ERR_R_MALLOC_FAILURE);
+
+ err:
+    OPENSSL_free(csder);
+
+    return 0;
+}
+
+int CMS_add1_counter_signature(CMS_SignerInfo *si, CMS_ContentInfo* cms,
+                               X509 *signer, EVP_PKEY *pk, const EVP_MD *md,
+                               unsigned int flags)
+{
+    CMS_SignedData *sd = NULL;
+    CMS_SignerInfo *counterSignature = NULL;
+    int i = 0;
+    ASN1_OCTET_STRING *signature = NULL;
+    unsigned char *digest = NULL;
+    unsigned int digestLength = 0;
+
+    if (!X509_check_private_key(signer, pk)) {
+        CMSerr(CMS_F_CMS_ADD1_COUNTER_SIGNATURE,
+               CMS_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE);
+        return 0;
+    }
+
+    sd = cms_get0_signed(cms);
+    if (!sd)
+        goto err;
+    counterSignature = cms_SignerInfo_init(sd, signer, pk, &md, flags);
+    if (!counterSignature)
+        goto err;
+    if (md == NULL)
+        goto err;
+
+    if (!(flags & CMS_NOATTR)) {
+        if (!counterSignature->signedAttrs) {
+            counterSignature->signedAttrs = sk_X509_ATTRIBUTE_new_null();
+            if (!counterSignature->signedAttrs)
+                goto merr;
+        }
+
+        if (!(flags & CMS_NOSMIMECAP)) {
+            STACK_OF(X509_ALGOR) *smcap = NULL;
+            i = CMS_add_standard_smimecap(&smcap);
+            if (i)
+                i = CMS_add_smimecap(counterSignature, smcap);
+            sk_X509_ALGOR_pop_free(smcap, X509_ALGOR_free);
+            if (!i)
+                goto merr;
+        }
+        if (flags & CMS_CADES) {
+            ESS_SIGNING_CERT *sc = NULL;
+            ESS_SIGNING_CERT_V2 *sc2 = NULL;
+            int add_sc;
+
+            if (md == EVP_sha1() || md == NULL) {
+                if ((sc = ESS_SIGNING_CERT_new_init(signer,
+                                                    NULL, 1)) == NULL)
+                    goto err;
+                add_sc = ossl_cms_add1_signing_cert(counterSignature, sc);
+                ESS_SIGNING_CERT_free(sc);
+            } else {
+                if ((sc2 = ESS_SIGNING_CERT_V2_new_init(md, signer,
+                                                        NULL, 1)) == NULL)
+                    goto err;
+                add_sc = ossl_cms_add1_signing_cert_v2(counterSignature, sc2);
+                ESS_SIGNING_CERT_V2_free(sc2);
+            }
+            if (!add_sc)
+                goto err;
+        }
+    }
+
+    if (!(flags & CMS_NOCERTS)) {
+        /* NB ignore -1 return for duplicate cert */
+        if (!CMS_add1_cert(cms, signer))
+            goto merr;
+    }
+
+    if (flags & CMS_KEY_PARAM) {
+        if (flags & CMS_NOATTR) {
+            counterSignature->pctx = EVP_PKEY_CTX_new(counterSignature->pkey, NULL);
+            if (counterSignature->pctx == NULL)
+                goto err;
+            if (EVP_PKEY_sign_init(counterSignature->pctx) <= 0)
+                goto err;
+            if (EVP_PKEY_CTX_set_signature_md(counterSignature->pctx, md) <= 0)
+                goto err;
+        } else if (EVP_DigestSignInit(counterSignature->mctx, &counterSignature->pctx, md, NULL, pk) <=
+                   0)
+            goto err;
+    } else if (!cms_sd_asn1_ctrl(counterSignature, 0))
+        goto err;
+
+    signature = CMS_SignerInfo_get0_signature(si);
+    if (!signature)
+        goto err;
+
+    if (!cms_create_digest(md, signature->data, signature->length, &digest, &digestLength))
+        goto err;
+
+    if (!CMS_signed_add1_attr_by_NID(counterSignature, NID_pkcs9_messageDigest,
+                                    V_ASN1_OCTET_STRING,
+                                    digest, digestLength))
+        goto err;
+
+    OPENSSL_clear_free(digest, (size_t)digestLength);
+
+    if (!CMS_SignerInfo_sign(counterSignature))
+        goto err;
+
+    if (!cms_SignerInfo_add_counter_signature(si, counterSignature))
+        goto merr;
+
+    M_ASN1_free_of(counterSignature, CMS_SignerInfo);
+    return 1;
+
+ merr:
+    CMSerr(CMS_F_CMS_ADD1_COUNTER_SIGNATURE, ERR_R_MALLOC_FAILURE);
+ err:
+    M_ASN1_free_of(counterSignature, CMS_SignerInfo);
+    OPENSSL_clear_free(digest, (size_t)digestLength);
+    return 0;
+
+}
diff --git a/crypto/err/openssl.txt b/crypto/err/openssl.txt
index 1cdf8c1567..3b213e5d8b 100644
--- a/crypto/err/openssl.txt
+++ b/crypto/err/openssl.txt
@@ -240,6 +240,7 @@ CMS_F_CHECK_CONTENT:99:check_content
 CMS_F_CMS_ADD0_CERT:164:CMS_add0_cert
 CMS_F_CMS_ADD0_RECIPIENT_KEY:100:CMS_add0_recipient_key
 CMS_F_CMS_ADD0_RECIPIENT_PASSWORD:165:CMS_add0_recipient_password
+CMS_F_CMS_ADD1_COUNTER_SIGNATURE:185:CMS_add1_counter_signature
 CMS_F_CMS_ADD1_RECEIPTREQUEST:158:CMS_add1_ReceiptRequest
 CMS_F_CMS_ADD1_RECIPIENT_CERT:101:CMS_add1_recipient_cert
 CMS_F_CMS_ADD1_SIGNER:102:CMS_add1_signer
@@ -249,6 +250,7 @@ CMS_F_CMS_COMPRESSEDDATA_CREATE:105:cms_CompressedData_create
 CMS_F_CMS_COMPRESSEDDATA_INIT_BIO:106:cms_CompressedData_init_bio
 CMS_F_CMS_COPY_CONTENT:107:cms_copy_content
 CMS_F_CMS_COPY_MESSAGEDIGEST:108:cms_copy_messageDigest
+CMS_F_CMS_CREATE_DIGEST:184:cms_create_digest
 CMS_F_CMS_DATA:109:CMS_data
 CMS_F_CMS_DATAFINAL:110:CMS_dataFinal
 CMS_F_CMS_DATAINIT:111:CMS_dataInit
@@ -310,7 +312,9 @@ CMS_F_CMS_SET1_SIGNERIDENTIFIER:146:cms_set1_SignerIdentifier
 CMS_F_CMS_SET_DETACHED:147:CMS_set_detached
 CMS_F_CMS_SIGN:148:CMS_sign
 CMS_F_CMS_SIGNED_DATA_INIT:149:cms_signed_data_init
+CMS_F_CMS_SIGNERINFO_ADD_COUNTER_SIGNATURE:186:cms_SignerInfo_add_counter_signature
 CMS_F_CMS_SIGNERINFO_CONTENT_SIGN:150:cms_SignerInfo_content_sign
+CMS_F_CMS_SIGNERINFO_INIT:187:cms_SignerInfo_init
 CMS_F_CMS_SIGNERINFO_SIGN:151:CMS_SignerInfo_sign
 CMS_F_CMS_SIGNERINFO_VERIFY:152:CMS_SignerInfo_verify
 CMS_F_CMS_SIGNERINFO_VERIFY_CERT:153:cms_signerinfo_verify_cert
diff --git a/include/openssl/cms.h b/include/openssl/cms.h
index e1ab4d4d18..39936afd20 100644
--- a/include/openssl/cms.h
+++ b/include/openssl/cms.h
@@ -36,6 +36,7 @@ DEFINE_STACK_OF(CMS_RecipientEncryptedKey)
 DEFINE_STACK_OF(CMS_RecipientInfo)
 DEFINE_STACK_OF(CMS_RevocationInfoChoice)
 DECLARE_ASN1_FUNCTIONS(CMS_ContentInfo)
+DECLARE_ASN1_FUNCTIONS(CMS_SignerInfo)
 DECLARE_ASN1_FUNCTIONS(CMS_ReceiptRequest)
 DECLARE_ASN1_PRINT_FUNCTION(CMS_ContentInfo)
 
@@ -337,6 +338,10 @@ int CMS_RecipientInfo_kari_decrypt(CMS_ContentInfo *cms,
 int CMS_SharedInfo_encode(unsigned char **pder, X509_ALGOR *kekalg,
                           ASN1_OCTET_STRING *ukm, int keylen);
 
+int CMS_add1_counter_signature(CMS_SignerInfo *si, CMS_ContentInfo* cms,
+                               X509 *signer, EVP_PKEY *pk, const EVP_MD *md,
+                               unsigned int flags);
+
 /* Backward compatibility for spelling errors. */
 # define CMS_R_UNKNOWN_DIGEST_ALGORITM CMS_R_UNKNOWN_DIGEST_ALGORITHM
 # define CMS_R_UNSUPPORTED_RECPIENTINFO_TYPE \
diff --git a/include/openssl/cmserr.h b/include/openssl/cmserr.h
index a3e9d92251..057c5be485 100644
--- a/include/openssl/cmserr.h
+++ b/include/openssl/cmserr.h
@@ -31,6 +31,7 @@ int ERR_load_CMS_strings(void);
 #  define CMS_F_CMS_ADD0_CERT                              164
 #  define CMS_F_CMS_ADD0_RECIPIENT_KEY                     100
 #  define CMS_F_CMS_ADD0_RECIPIENT_PASSWORD                165
+#  define CMS_F_CMS_ADD1_COUNTER_SIGNATURE                 185
 #  define CMS_F_CMS_ADD1_RECEIPTREQUEST                    158
 #  define CMS_F_CMS_ADD1_RECIPIENT_CERT                    101
 #  define CMS_F_CMS_ADD1_SIGNER                            102
@@ -42,6 +43,7 @@ int ERR_load_CMS_strings(void);
 #  define CMS_F_CMS_COMPRESSEDDATA_INIT_BIO                106
 #  define CMS_F_CMS_COPY_CONTENT                           107
 #  define CMS_F_CMS_COPY_MESSAGEDIGEST                     108
+#  define CMS_F_CMS_CREATE_DIGEST                          184
 #  define CMS_F_CMS_DATA                                   109
 #  define CMS_F_CMS_DATAFINAL                              110
 #  define CMS_F_CMS_DATAINIT                               111
@@ -101,7 +103,9 @@ int ERR_load_CMS_strings(void);
 #  define CMS_F_CMS_SET_DETACHED                           147
 #  define CMS_F_CMS_SIGN                                   148
 #  define CMS_F_CMS_SIGNED_DATA_INIT                       149
+#  define CMS_F_CMS_SIGNERINFO_ADD_COUNTER_SIGNATURE       186
 #  define CMS_F_CMS_SIGNERINFO_CONTENT_SIGN                150
+#  define CMS_F_CMS_SIGNERINFO_INIT                        187
 #  define CMS_F_CMS_SIGNERINFO_SIGN                        151
 #  define CMS_F_CMS_SIGNERINFO_VERIFY                      152
 #  define CMS_F_CMS_SIGNERINFO_VERIFY_CERT                 153
-- 
2.37.2

