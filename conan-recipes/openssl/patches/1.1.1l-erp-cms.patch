--- include/openssl/cms.h	2021-12-22 10:55:39.000000000 +0100
+++ include/openssl/cms.h	2021-12-22 11:02:02.000000000 +0100
@@ -216,6 +216,14 @@
 int CMS_add1_crl(CMS_ContentInfo *cms, X509_CRL *crl);
 STACK_OF(X509_CRL) *CMS_get1_crls(CMS_ContentInfo *cms);
 
+int CMS_add0_otherRevocationInfoChoice(CMS_ContentInfo *cms,
+                                       ASN1_OBJECT* formatObject,
+                                       ASN1_TYPE* data);
+int CMS_get_anotherRevocationInfo_by_format(CMS_ContentInfo *cms,
+                                            ASN1_OBJECT* formatObject,
+                                            int lastpos);
+ASN1_TYPE* CMS_get0_anotherRevocationInfo(CMS_ContentInfo *cms, int idx);
+
 int CMS_SignedData_init(CMS_ContentInfo *cms);
 CMS_SignerInfo *CMS_add1_signer(CMS_ContentInfo *cms,
                                 X509 *signer, EVP_PKEY *pk, const EVP_MD *md,
--- crypto/cms/cms_asn1.c	2021-12-22 10:54:43.000000000 +0100
+++ crypto/cms/cms_asn1.c	2021-12-22 11:02:02.000000000 +0100
@@ -68,7 +68,7 @@
 ASN1_SEQUENCE(CMS_OtherRevocationInfoFormat) = {
         ASN1_SIMPLE(CMS_OtherRevocationInfoFormat, otherRevInfoFormat, ASN1_OBJECT),
         ASN1_OPT(CMS_OtherRevocationInfoFormat, otherRevInfo, ASN1_ANY)
-} static_ASN1_SEQUENCE_END(CMS_OtherRevocationInfoFormat)
+} ASN1_SEQUENCE_END(CMS_OtherRevocationInfoFormat)
 
 ASN1_CHOICE(CMS_RevocationInfoChoice) = {
         ASN1_SIMPLE(CMS_RevocationInfoChoice, d.crl, X509_CRL),
--- crypto/cms/cms_lib.c	2021-12-22 10:54:43.000000000 +0100
+++ crypto/cms/cms_lib.c	2021-12-22 11:02:02.000000000 +0100
@@ -476,6 +476,26 @@
     return r;
 }

+int CMS_add0_otherRevocationInfoChoice(CMS_ContentInfo *cms,
+                                       ASN1_OBJECT* formatObject,
+                                       ASN1_TYPE* data)
+{
+    CMS_RevocationInfoChoice *rch;
+    rch = CMS_add0_RevocationInfoChoice(cms);
+    if (!rch)
+        return 0;
+
+    rch->type = CMS_REVCHOICE_OTHER;
+    rch->d.other = M_ASN1_new_of(CMS_OtherRevocationInfoFormat);
+    if (!rch->d.other)
+        return 0;
+
+    rch->d.other->otherRevInfoFormat = formatObject;
+    rch->d.other->otherRevInfo = data;
+
+    return 1;
+}
+
 STACK_OF(X509) *CMS_get1_certs(CMS_ContentInfo *cms)
 {
     STACK_OF(X509) *certs = NULL;
@@ -504,6 +524,57 @@
 
 }
 
+int CMS_get_anotherRevocationInfo_by_format(CMS_ContentInfo *cms,
+                                            ASN1_OBJECT* formatObject,
+                                            int lastpos)
+{
+    if (!cms || !formatObject)
+      return -1;
+
+    STACK_OF(CMS_RevocationInfoChoice) **pcrls;
+    CMS_RevocationInfoChoice *rch;
+    int i;
+    pcrls = cms_get0_revocation_choices(cms);
+    if (!pcrls)
+        return -1;
+
+    int startIndex = lastpos + 1;
+    if (startIndex < 0)
+        startIndex = 0;
+    for (i = startIndex; i < sk_CMS_RevocationInfoChoice_num(*pcrls); i++) {
+        rch = sk_CMS_RevocationInfoChoice_value(*pcrls, i);
+        if (rch
+            && rch->type == CMS_REVCHOICE_OTHER
+            && rch->d.other
+            && rch->d.other->otherRevInfoFormat
+            && OBJ_cmp(rch->d.other->otherRevInfoFormat, formatObject) == 0) {
+            return i;
+        }
+    }
+    return -1;
+}
+
+ASN1_TYPE* CMS_get0_anotherRevocationInfo(CMS_ContentInfo *cms, int idx)
+{
+    if (!cms)
+      return NULL;
+
+    STACK_OF(CMS_RevocationInfoChoice) **pcrls;
+    CMS_RevocationInfoChoice *rch;
+    pcrls = cms_get0_revocation_choices(cms);
+    if (!pcrls)
+        return NULL;
+
+    if (idx < 0 || idx >= sk_CMS_RevocationInfoChoice_num(*pcrls))
+        return NULL;
+
+    rch = sk_CMS_RevocationInfoChoice_value(*pcrls, idx);
+    if (rch && rch->type == 1 && rch->d.other)
+        return rch->d.other->otherRevInfo;
+
+    return NULL;
+}
+
 STACK_OF(X509_CRL) *CMS_get1_crls(CMS_ContentInfo *cms)
 {
     STACK_OF(X509_CRL) *crls = NULL;
--- crypto/cms/cms_local.h	2021-12-22 10:54:43.000000000 +0100
+++ crypto/cms/cms_local.h	2021-12-22 11:02:02.000000000 +0100
@@ -427,6 +427,7 @@
 DECLARE_ASN1_ITEM(CMS_KeyTransRecipientInfo)
 DECLARE_ASN1_ITEM(CMS_OriginatorPublicKey)
 DECLARE_ASN1_ITEM(CMS_OtherKeyAttribute)
+DECLARE_ASN1_ITEM(CMS_OtherRevocationInfoFormat)
 DECLARE_ASN1_ITEM(CMS_Receipt)
 DECLARE_ASN1_ITEM(CMS_ReceiptRequest)
 DECLARE_ASN1_ITEM(CMS_RecipientEncryptedKey)
